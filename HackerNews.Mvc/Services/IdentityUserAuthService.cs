using HackerNews.Domain.Common.Models.Users;
using HackerNews.Domain.Entities;
using HackerNews.Domain.Exceptions;
using HackerNews.Mvc.Services.Interfaces;
using Microsoft.AspNetCore.Identity;
using System.Threading.Tasks;

namespace HackerNews.Mvc.Services
{
	/// <summary>
	/// Provides a unified way of managing all authentication cookies necessary to the application. This can
	/// include the default cookies generated by the SignInManager, as well as the JWT cookies managed by 
	/// the IApiJwtManager.
	/// </summary>
	public class IdentityUserAuthService : IUserAuthService
	{
		private readonly SignInManager<User> _signInManager;
		private readonly IApiSignInManager _apiJwtManager;

		public IdentityUserAuthService(SignInManager<User> signInManager, IApiSignInManager apiJwtManager)
		{
			_signInManager = signInManager;
			_apiJwtManager = apiJwtManager;
		}

		/// <summary>
		/// Login with the SignInManager
		/// </summary>
		/// <param name="loginModel"></param>
		/// <returns></returns>
		public async Task LogInAsync(LoginModel loginModel)
		{
			// This generates and attaches a cookie which the auth middleware can use to reconstruct a user, while
			// signed in.
			var result = await _signInManager.PasswordSignInAsync(loginModel.UserName, loginModel.Password, isPersistent: true, false);
			if (!result.Succeeded) throw new InvalidPostException("Invalid login credentials.");

			// In many applications, it would not be necessary to login in to the API. This is only done so the web
			// app may make calls to the API using a JWT if necessary.
			await _apiJwtManager.LogInAsync(loginModel);
		}

		public async Task LogOutAsync()
		{
			// This removes the auth cookie.
			await _signInManager.SignOutAsync();


			await _apiJwtManager.LogOutAsync();
		}
	}
}
